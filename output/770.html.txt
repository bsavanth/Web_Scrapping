mime
version
1
0
server
cern
3
0
date
wednesday
20
nov
96
gmt
content
type
text
html
content
length
5082
last
modified
tuesday
08
oct
96
gmt
cs611
semantics
of
programming
languages
cs
611
semantics
of
programming
languages
contents
description
texts
and
prerequisites
handouts
scribed
lecture
notes
homework
assignments
contact
information
relevant
web
links
description
lectures
mwf
10
10
11
00
am
upson
211
though
cs611
is
called
advanced
programming
languages
in
the
course
book
it
is
better
entitled
semantics
of
programming
languages
the
goal
of
this
course
is
not
to
conduct
a
broad
survey
of
hi
tech
programming
languages
like
c
java
or
sml
nor
to
directly
study
implementation
mechanisms
for
these
languages
e
g
compressed
dispatch
tables
for
multiple
inheritance
rather
the
goal
of
this
course
is
to
study
the
principles
of
formal
notation
for
describing
computations
and
tools
for
analyzing
and
proving
properties
of
computations
these
concerns
subsume
the
study
of
specific
programming
languages
or
implementation
mechanisms
and
hence
lead
to
a
deeper
understanding
of
programming
specification
logic
mathematics
and
proof
theory
for
example
we
will
study
notations
for
abstractly
specifying
how
programs
compute
operational
semantics
as
well
as
notations
for
describing
what
programs
compute
denotational
semantics
in
turn
the
abstract
but
precise
realization
of
these
notations
will
allow
us
to
study
techniques
induction
logical
relations
for
formally
proving
interesting
and
relevant
properties
of
programming
languages
e
g
type
safety
or
compiler
correctness
ideally
a
student
coming
out
of
this
course
will
have
learned
something
about
how
to
make
informal
concepts
and
notation
precise
and
how
to
manipulate
the
notation
to
demonstrate
useful
properties
textbooks
semantics
of
programming
languages
carl
a
gunter
ml
for
the
working
programmer
second
edition
larry
paulson
prerequisites
on
the
programming
side
we
assume
experience
with
at
least
a
pascal
or
c
like
language
preferably
students
will
have
some
knowledge
and
experience
working
with
a
functional
language
such
as
scheme
ml
or
haskell
on
the
theoretical
side
we
assume
a
basic
proficiency
in
undergraduate
mathematics
logic
and
computer
science
a
basic
knowledge
of
computability
e
g
turing
machines
recursive
functions
and
logic
e
g
predicate
calculus
as
well
as
some
mathematical
maturity
is
required
this
course
is
designed
for
phd
students
in
cs
math
or
and
ee
it
is
not
for
meng
or
undergraduate
students
if
you
are
an
meng
or
undergraduate
student
you
must
talk
to
the
instructor
to
find
out
if
the
course
is
suitable
for
you
contact
information
newsgroup
cornell
class
cs611
instructor
greg
morrisett
upson
4105
c
jgm
cs
cornell
edu
5
3009
office
hours
mf
after
class
or
by
appointment
admin
assistant
linda
competillo
upson
4115
ta
uacute
lfar
erlingsson
upson
4162
ulfar
cs
cornell
edu
5
2219
office
hours
tue
2
3
pm
thu
1
30
2
30
pm
relevant
web
links
mark
leone
s
resources
for
programming
language
research
emacs
mode
for
ml
ml
el
comint
el
needed
by
ml
el
the
fox
project
s
on
line
information
about
standard
ml
reference
information
for
sml
nj
postscript
user
s
guide
description
of
the
base
environment
description
of
the
system
environment
library
documentation
documentation
of
available
tools
reference
index
documentation
of
available
tools
a
gentle
introduction
to
sml
andrew
cumming
mit
s
info
on
sml
nj
