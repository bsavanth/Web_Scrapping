date
wed
20
nov
1996
gmt
server
ncsa
1
5
1
last
modified
fri
10
may
1996
gmt
content
type
text
html
content
length
8890
cis
841
se
750
ks
software
validation
and
verification
spring
1996
cis
841
se
750
ks
software
validation
and
verification
spring
1996
what
s
new
on
these
web
pages
the
final
exam
is
now
online
homework
assignment
3
part
b
is
now
online
someone
asked
for
a
clarification
regarding
data
flow
criteria
it
appears
i
mis
spoke
in
discussing
a
hint
on
collecting
data
for
assignment
3
part
a
here
is
the
clarification
the
all
du
paths
criteria
requires
that
all
paths
between
all
defs
and
all
uses
it
reaches
be
exercised
the
all
uses
criteria
requires
some
path
between
all
defs
and
all
uses
it
reaches
be
exercised
the
all
defs
criteria
requires
some
path
between
all
defs
and
some
uses
it
reaches
be
exercised
to
summarize
for
all
definitions
criteria
num
uses
paths
to
uses
all
du
all
all
all
uses
all
some
all
defs
some
some
note
that
some
is
satisfied
by
one
i
know
that
some
of
you
are
having
significant
technical
problems
with
the
course
by
this
i
mean
delays
in
receiving
tapes
receiving
blank
tapes
and
variability
in
the
audio
quality
of
tapes
i
d
like
to
try
to
assess
how
wide
spread
this
is
if
i
find
that
it
is
a
problem
for
a
significant
number
of
you
i
plan
on
complaining
to
ntu
i
m
not
sure
if
it
will
do
any
good
but
its
worth
a
try
so
send
me
your
feedback
if
you
have
any
other
comments
on
the
way
the
course
is
being
taught
please
feel
free
to
let
me
know
it
will
not
affect
your
grade
overview
as
software
systems
increase
in
size
and
complexity
the
difficulty
of
assuring
that
they
function
as
intended
increases
rapidly
a
variety
of
approaches
have
been
proposed
that
have
the
potential
to
enable
development
organizations
and
individual
developers
to
produce
higher
quality
software
in
general
no
single
technique
is
capable
of
providing
incontrovertable
proof
that
software
always
behaves
as
intended
in
this
course
we
will
examine
different
verification
and
validation
approaches
that
are
capable
of
providing
us
with
evidence
of
software
quality
using
a
combination
of
these
techniques
can
provide
a
high
degree
of
confidence
in
the
quality
of
the
software
we
construct
lectures
durland
164
mw
3
30
4
45
pm
exams
held
in
nichols
236
instructor
prof
matt
dwyer
prerequisites
cis
740
requirements
the
course
will
consist
of
lectures
readings
homework
assignments
and
examinations
the
bulk
of
the
concepts
in
the
course
will
be
presented
explained
and
illustrated
by
way
of
extended
examples
in
the
lectures
the
readings
serve
to
provide
more
details
and
depth
on
selected
concepts
homework
is
designed
to
develop
student
s
abilities
to
apply
concepts
and
synthesize
solutions
to
new
problems
based
on
those
concepts
lectures
and
readings
lectures
and
readings
function
as
an
integrated
presentation
of
the
course
material
it
is
expected
that
readings
will
be
read
prior
to
the
appropriate
lecture
homework
there
will
be
four
homework
assignments
the
assignments
will
involve
applying
and
extending
the
concepts
presented
in
the
lectures
and
readings
for
some
of
the
homeworks
you
will
be
required
to
apply
specific
techniques
to
actual
code
for
these
assignments
i
will
make
samples
of
code
available
that
you
can
use
alternatively
you
can
use
a
piece
of
code
that
you
have
developed
homeworks
should
be
completed
individually
do
not
work
with
any
other
person
assignments
are
due
at
the
beginning
of
class
10
will
be
deducted
for
late
assignments
an
additional
10
for
each
day
late
off
campus
students
may
either
email
their
solutions
to
me
or
fax
their
solutions
using
913
532
7353
examinations
there
will
be
a
comprehensive
take
home
final
exam
final
grades
will
be
assigned
based
on
the
following
weighting
homeworks
40
mid
term
20
and
final
40
readings
the
required
readings
for
this
course
are
selected
papers
from
the
literature
references
if
you
do
not
have
access
to
these
papers
they
have
been
collected
and
are
available
from
copy
co
phone
number
913
537
2679
the
cost
is
126
50
in
addition
to
the
required
readings
you
may
find
the
following
texts
useful
as
they
contain
some
of
the
material
in
the
course
they
range
from
general
software
engineering
texts
to
in
depth
treatments
of
issues
related
to
particular
verification
and
validation
approaches
there
are
a
number
of
general
software
engineering
text
this
text
does
a
good
job
with
software
quaility
issues
fundamentals
of
software
engineering
c
ghezzi
m
jazayeri
and
d
mandrioli
prentice
hall
the
following
two
texts
cover
a
broad
range
of
testing
techniques
and
contain
significant
practical
information
for
testers
software
testing
techniques
b
beizer
van
nostrand
reinhold
the
craft
of
software
testing
b
marick
prentice
hall
representations
and
algorithms
for
data
flow
analysis
are
covered
in
most
compiler
books
a
good
example
is
compilers
principles
techniques
and
tools
a
v
aho
r
sethi
and
j
d
ullman
addison
wesley
additional
resources
web
pages
for
course
linked
off
of
my
home
page
will
include
assignments
solutions
lecture
notes
and
links
to
other
validation
and
verification
pages
organization
schedule
the
course
is
broken
up
into
the
following
parts
foundations
of
program
analysis
we
cover
mathematical
preliminaries
how
validation
and
verification
activities
relate
to
other
software
development
activities
we
present
and
discuss
a
variety
of
models
that
are
used
to
represent
and
reason
about
the
possible
behavior
of
a
program
specification
of
intended
program
behavior
how
do
we
say
what
a
program
should
do
while
there
are
a
variety
of
different
specification
formalisms
in
this
course
we
will
focus
on
finite
state
automata
specifications
static
techniques
examine
the
text
of
designs
specifications
or
code
one
can
view
static
techniques
as
a
kind
of
abstract
execution
of
the
program
this
execution
produces
different
kinds
of
output
than
the
normal
program
execution
and
that
output
is
used
to
drive
validation
and
verification
efforts
this
execution
can
be
accomplished
on
a
variety
of
different
substrates
we
will
study
both
manual
techniques
that
use
developers
to
perform
program
analyses
automated
techniques
that
algorithmically
perform
program
analyses
dynamic
techniques
involve
executing
an
implementation
with
respect
to
the
semantics
of
the
language
in
which
it
is
written
validation
and
verification
efforts
are
based
on
observing
the
behaviour
of
the
software
as
it
executes
this
can
include
observing
normal
program
output
as
well
as
probing
the
state
of
the
software
during
different
points
in
its
execution
well
look
at
techniques
based
on
both
of
these
assertion
based
analyses
involve
periodic
checking
of
intended
behavior
during
program
execution
testing
involves
checking
of
software
input
output
relationships
software
processes
that
support
verification
and
validation
provide
an
infrastructure
in
which
quality
assurance
activities
can
be
organized
monitored
and
controlled
software
safety
in
life
critical
systems
is
emerging
as
an
increasingly
important
area
of
quality
assurance
concurrency
is
being
used
increasingly
in
distributed
and
parallel
software
along
with
increased
performance
comes
an
increase
in
the
complexity
of
the
already
difficult
problem
of
quality
assurance
we
will
consider
the
impact
of
concurrency
on
both
static
and
dynamic
analysis
approaches
dwyer
cis
ksu
edu
